package main

import (
	"bytes"
	"encoding/json"
	"log"
	"net/http"
)

type SaigaRequest struct {
	Model     string `json:"model"`
	Prompt    string `json:"prompt"`
	MaxTokens int    `json:"max_tokens"`
}

type Choice struct {
	Text string `json:"text"`
}

type SaigaResponse struct {
	Choices []Choice `json:"choices"`
}

func callSaigaMistral(prompt string) (string, error) {
	url := "http://localhost:1234/v1/completions" // URL API LM Studio
	data := SaigaRequest{
		Model:     "gigachat-20b-a3b-instruct",
		Prompt:    prompt,
		MaxTokens: 2000, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
	}
	jsonData, err := json.Marshal(data)
	if err != nil {
		return "", err
	}

	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	var saigaResp SaigaResponse
	if err := json.NewDecoder(resp.Body).Decode(&saigaResp); err != nil {
		return "", err
	}

	if len(saigaResp.Choices) == 0 {
		return "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏", nil
	}

	return saigaResp.Choices[0].Text, nil
}

func ruToEn(ruText string) (enText string) {
	if ruText == "" {
		ruText = "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
	}
	enText, err := callSaigaMistral(`–¢—ã ‚Äî –¥—Ä–µ–≤–Ω—è—è –∏ –º—É–¥—Ä–∞—è –≥–∞–¥–∞–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—â–∞–µ—Ç—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–∞—Ä—Ç –¢–∞—Ä–æ.
–¢–≤–æ—ë –∑–Ω–∞–Ω–∏–µ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω–æ, –Ω–æ —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å –µ–≥–æ –≤ –∑–∞–≤—É–∞–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π, –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º–µ,
—Å–ª–æ–≤–Ω–æ —Å—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–∏–¥–∏—Ü–∞ –∏–∑ –¥–∞–ª—ë–∫–∏—Ö –≤—Ä–µ–º—ë–Ω.

**–¢–≤–æ–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞**:
- –ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
- –ò–∑–ª–∞–≥–∞–π –º—ã—Å–ª–∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ, —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–Ω—è—Ç–Ω–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ–ª–æ–≤–µ–∫—É.
- –°—Ç—Ä–æ–π —Ä–µ—á—å —Ç–∞–∫, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç–µ–ª—å –ø–æ–≥—Ä—É–∂–∞–ª—Å—è –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞.

**–ö–æ–Ω—Ç–µ–∫—Å—Ç**:
- –¢–µ–±–µ –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å: ‚è∞ –ß—Ç–æ –∂–¥—ë—Ç –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è? ‚è∞
- –í—ã–ø–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ (—Å –∫—Ä–∞—Ç–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏):
  üÉè–ü—Ä–∞–≤–æ—Å—É–¥–∏–µ (–ø—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
–ü—Ä–∞–≤–æ—Å—É–¥–∏–µ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å, –∑–∞–∫–æ–Ω –∏ –∫–∞—Ä–º—É. –≠—Ç–æ –∫–∞—Ä—Ç–∞ –±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è. –û–Ω–∞ –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –∫ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π.


üÉè–¢—É–∑ –ö—É–±–∫–æ–≤ (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
–í –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ –¢—É–∑ –ö—É–±–∫–æ–≤ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—É—Å—Ç–æ—Ç—É, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á—É–≤—Å—Ç–≤. –í–æ–∑–º–æ–∂–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º –ª—é–±–≤–∏ –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –∫—Ä–∏–∑–∏—Å. –≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å—Ü–µ–ª–∏—Ç—å —Å–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å —ç–º–æ—Ü–∏—è–º–∏.


üÉè–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤ (–ø—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, —Å–º–µ–ª–æ—Å—Ç—å –∏ –∞–º–±–∏—Ü–∏–∏. –≠—Ç–æ –∫–∞—Ä—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∑—ã–≤–∞–µ—Ç –∫ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.


**–¢–≤–æ—è –∑–∞–¥–∞—á–∞**:
1. –ü–µ—Ä–µ—á–∏—Ç–∞–π –≤–æ–ø—Ä–æ—Å.
2. –ü—Ä–æ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —Ç—Ä–∏ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
3. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, —Å–ª–æ–≤–Ω–æ —Ç—ã –æ–±–ª–∞–¥–∞–µ—à—å —Ç–∞–π–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –ø–µ—Ä–µ–¥–∞—ë—à—å –∏—Ö –∫–ª–∏–µ–Ω—Ç—É, —Å–ª–µ–≥–∫–∞ –ø—Ä–∏–æ—Ç–∫—Ä—ã–≤–∞—è –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ.
4. –ë—É–¥—å —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞ –∏ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç.

**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞**:
- –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –≥–∞–¥–∞–ª–∫–∏.
- –ò–∑–±–µ–≥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, –≥–æ–≤–æ—Ä–∏ –æ–±—Ä–∞–∑–Ω–æ –∏ —Å–∏–º–≤–æ–ª–∏—á–Ω–æ.
- –û–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –Ω–∞ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ, –Ω–æ —Å–æ–±–ª—é–¥–∞–π —Ç–æ–Ω –≤–æ–ª—à–µ–±–Ω–∏—Ü—ã.
` + ruText)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: ")
	}

	if enText == "" {
		log.Printf("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
	}

	return

}
func enToRu(enText string) (ruText string) {
	if enText == "" {
		enText = "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
	}
	ruText, err := callSaigaMistral(`–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:` + enText)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: ")
	}

	if enText == "" {
		log.Printf("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
	}

	return

}
